import numpy as np
from numpy.random import rand
import matplotlib.pyplot as plt
def random_state(N):
  state=2*np.random.randint(2, size=N)-1
  return state

def metropolis_move(spin_chain, beta):
    for i in range(N):
        a = np.random.randint(0, N)
        
        spin=spin_chain[a]
        
        if a==0:
            flip_cost=2*(spin_chain[0])*(spin_chain[1])
            if flip_cost<0:
                spin*=-1
            elif rand() < np.exp(-flip_cost * beta):
                spin*=-1
                spin_chain[a]=spin

        elif a==N-1:
            flip_cost=2*(spin_chain[N-2])*(spin_chain[N-1])
            if flip_cost<0:
                spin*=-1
            elif rand() < np.exp(-flip_cost * beta):
                spin*=-1
                spin_chain[a]=spin
        
        else:
            flip_cost=2*(spin_chain[a])*(spin_chain[a-1]+spin_chain[a+1])
            if flip_cost<0:
                spin*=-1
            elif rand() < np.exp(-flip_cost * beta):
                spin*=-1
                spin_chain[a]=spin
            
    return spin_chain
def Hcalc(spin_chain):
    H=0
    for i in range(len(spin_chain)):
        spin=spin_chain[i]
        if i==0:
            H+=-spin*(spin_chain[1])
        elif i==N-1:
            H+=-spin*(spin_chain[N-2])
        else:
            a=spin*(spin_chain[i+1]+ spin_chain[i-1])
            H+=-a
    return H/2
def Mcalc(spin_chain):
    return np.sum(spin_chain)
